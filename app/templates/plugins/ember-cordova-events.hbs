<article class="box post post-excerpt">
  <header>
    <h2>ember-cordova-events</h2>
  </header>
  <hr>
  <h3>Summary</h3>

  <p><code>ember-cordova-events</code> provides access to Cordova events, allowing your ember app to react to device level events such as offline, low battery, menu button, and more.</p>

  <p>There are two mechanisms to handle these events:</p>

  <ul>
    <li><strong>Evented:</strong> All events are available for subscription from inside a function, e.g. lifecycle hooks like <code>init</code> or <code>beforeModel</code>, via <code>Ember.Evented</code>; and</li>
    <li><strong>Subscribe:</strong> The <code>subscribe</code> util is a function that will tear down your listeners and prevent memory leaks. Like the <code>computed</code> helper, you register it at the top-level of your file, declare your service property + event, and pass it a function that should fire.</li>
  </ul>

  <p>These are not interchangeable; <code>subscribe</code> relies on the <code>this</code> scope available on the object, while <code>Evented</code> relies on the <code>this</code> scope inside a function. Whenever possible, we endorse the use of <code>Subscribe</code> vs. <code>Evented</code>.</p>

  <h3>Installation</h3>

  <div><pre><code>ember install ember-cordova-events
  </code></pre>
  </div>

  <h3>Example Usage</h3>

  <p>Show an alert when the battery is low, using both forms (demonstration only!!!):</p>

  <div><pre><code><span class="kr">import</span> <span class="nx">Ember</span> <span class="nx">from</span> <span class="s1">'ember'</span><span class="p">;</span>
  <span class="kr">import</span> <span class="nx">subscribe</span> <span class="nx">from</span> <span class="s1">'ember-cordova-events/utils/subscribe'</span><span class="p">;</span>

  <span class="kr">const</span> <span class="p">{</span>
    <span class="nx">Route</span><span class="p">,</span>
    <span class="nx">inject</span><span class="err">:</span> <span class="p">{</span> <span class="nx">service</span> <span class="p">}</span>
  <span class="p">}</span> <span class="o">=</span> <span class="nx">Ember</span><span class="p">;</span>

  <span class="kr">export</span> <span class="k">default</span> <span class="nx">Route</span><span class="p">.</span><span class="nx">extend</span><span class="p">({</span>
    <span class="na">cordovaEvents</span><span class="p">:</span> <span class="nx">service</span><span class="p">(</span><span class="s1">'ember-cordova/events'</span><span class="p">),</span>

    <span class="na">onBatteryLow</span><span class="p">:</span> <span class="nx">subscribe</span><span class="p">(</span><span class="s1">'cordovaEvents.batterylow'</span><span class="p">,</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
      <span class="k">this</span><span class="p">.</span><span class="nx">_alertBattery</span><span class="p">();</span>
    <span class="p">}),</span>

    <span class="nx">beforeModel</span><span class="p">()</span> <span class="p">{</span>
      <span class="k">this</span><span class="p">.</span><span class="nx">get</span><span class="p">(</span><span class="s1">'cordovaEvents'</span><span class="p">).</span><span class="nx">on</span><span class="p">(</span><span class="s1">'batterylow'</span><span class="p">,</span> <span class="k">this</span><span class="p">,</span> <span class="s1">'_alertBattery'</span><span class="p">);</span>
    <span class="p">},</span>

    <span class="nx">deactivate</span><span class="p">()</span> <span class="p">{</span>
      <span class="k">this</span><span class="p">.</span><span class="nx">get</span><span class="p">(</span><span class="s1">'cordovaEvents'</span><span class="p">).</span><span class="nx">off</span><span class="p">(</span><span class="s1">'batterylow'</span><span class="p">,</span> <span class="k">this</span><span class="p">,</span> <span class="s1">'_alertBattery'</span><span class="p">);</span>
    <span class="p">},</span>

    <span class="nx">_alertBattery</span><span class="p">()</span> <span class="p">{</span>
      <span class="nx">alert</span><span class="p">(</span><span class="s1">'Battery level is low!'</span><span class="p">);</span>
    <span class="p">}</span>
  <span class="p">});</span>
  </code></pre>
  </div>

  <h3>Supported Events</h3>

  <p>from <a class="wrapper" target="_blank" href="https://cordova.apache.org/docs/en/latest/cordova/events/events.html">https://cordova.apache.org/docs/en/latest/cordova/events/events.html</a></p>

  <div><pre><code><span class="kr">const</span> <span class="nx">CORDOVA_EVENTS</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">A</span><span class="p">([</span>
    <span class="s1">'deviceready'</span><span class="p">,</span>
    <span class="s1">'pause'</span><span class="p">,</span>
    <span class="s1">'resume'</span><span class="p">,</span>
    <span class="s1">'backbutton'</span><span class="p">,</span>
    <span class="s1">'menubutton'</span><span class="p">,</span>
    <span class="s1">'searchbutton'</span><span class="p">,</span>
    <span class="s1">'startcallbutton'</span><span class="p">,</span>
    <span class="s1">'endcallbutton'</span><span class="p">,</span>
    <span class="s1">'volumedownbutton'</span><span class="p">,</span>
    <span class="s1">'volumeupbutton'</span><span class="p">,</span>
    <span class="s1">'batterycritical'</span><span class="p">,</span>
    <span class="s1">'batterylow'</span><span class="p">,</span>
    <span class="s1">'batterystatus'</span><span class="p">,</span>
    <span class="s1">'online'</span><span class="p">,</span>
    <span class="s1">'offline'</span>
  <span class="p">]);</span>
  </code></pre>
  </div>

  <h3>Usage</h3>

  <h4>Subscribe</h4>

  <p>This method will tear down your objectâ€™s listeners automatically, but can only be used at the top-level of an Ember object (just like <code>Ember.computed</code> and <code>Ember.on</code>).</p>

  <p><code>Subscribe</code> will fail when placed in functions; for those cases, you will want to use <code>Evented</code>.</p>

  <p><strong>Example usage:</strong></p>

  <div><pre><code><span class="kr">import</span> <span class="nx">Ember</span> <span class="nx">from</span> <span class="s1">'ember'</span><span class="p">;</span>
  <span class="kr">import</span> <span class="nx">subscribe</span> <span class="nx">from</span> <span class="s1">'ember-cordova-events/utils/subscribe'</span><span class="p">;</span>

  <span class="kr">const</span> <span class="p">{</span>
    <span class="nx">Route</span><span class="p">,</span>
    <span class="nx">inject</span><span class="err">:</span> <span class="p">{</span> <span class="nx">service</span> <span class="p">}</span>
  <span class="p">}</span> <span class="o">=</span> <span class="nx">Ember</span><span class="p">;</span>

  <span class="kr">export</span> <span class="k">default</span> <span class="nx">Route</span><span class="p">.</span><span class="nx">extend</span><span class="p">({</span>
    <span class="na">cordovaEvents</span><span class="p">:</span> <span class="nx">service</span><span class="p">(</span><span class="s1">'ember-cordova/events'</span><span class="p">),</span>

    <span class="na">logReady</span><span class="p">:</span> <span class="nx">subscribe</span><span class="p">(</span><span class="s1">'cordovaEvents.deviceready'</span><span class="p">,</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
      <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s1">'ready'</span><span class="p">);</span>
    <span class="p">})</span>
  <span class="p">});</span>
  </code></pre>
  </div>

  <p>The following will fail, because the subscribe util is not top-level on the object. Use <code>Evented</code> instead.</p>

  <div><pre><code>  <span class="nx">beforeModel</span><span class="p">()</span> <span class="p">{</span>
      <span class="c1">// this will not fire, use Events instead</span>
      <span class="nx">subscribe</span><span class="p">(</span><span class="s1">'cordovaEvents.deviceready'</span><span class="p">,</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
        <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s1">'will never be ready'</span><span class="p">);</span>
      <span class="p">});</span>
    <span class="p">}</span>
  </code></pre>
  </div>

  <h4>Evented</h4>

  <p>Use the standard <code>Ember.Evented</code> syntax when you want to create listeners inside of a function (e.g. beforeModel).
  You will need to manually unsubscribe listeners to avoid leaky behaviour.</p>

  <p><strong>Example usage:</strong></p>

  <div><pre><code><span class="kr">export</span> <span class="k">default</span> <span class="nx">Route</span><span class="p">.</span><span class="nx">extend</span><span class="p">({</span>
    <span class="na">cordovaEvents</span><span class="p">:</span> <span class="nx">service</span><span class="p">(</span><span class="s1">'ember-cordova/events'</span><span class="p">),</span>

    <span class="na">activate</span><span class="p">:</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
      <span class="k">if</span> <span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">shouldNotListen</span><span class="p">)</span> <span class="p">{</span> <span class="k">return</span><span class="p">;</span> <span class="p">}</span>

      <span class="k">this</span><span class="p">.</span><span class="nx">get</span><span class="p">(</span><span class="s1">'cordovaEvents'</span><span class="p">).</span><span class="nx">on</span><span class="p">(</span><span class="s1">'pause'</span><span class="p">,</span> <span class="k">this</span><span class="p">,</span> <span class="s1">'_resumeListening'</span><span class="p">);</span>
    <span class="p">},</span>

    <span class="na">deactivate</span><span class="p">:</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
      <span class="k">this</span><span class="p">.</span><span class="nx">get</span><span class="p">(</span><span class="s1">'cordovaEvents'</span><span class="p">).</span><span class="nx">off</span><span class="p">(</span><span class="s1">'pause'</span><span class="p">,</span> <span class="k">this</span><span class="p">,</span> <span class="s1">'_resumeListening'</span><span class="p">);</span>
    <span class="p">},</span>

    <span class="na">_resumeListening</span><span class="p">:</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
      <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s2">"i'm listening to what you have to say"</span><span class="p">);</span>
    <span class="p">}</span>
  <span class="p">});</span>
  </code></pre>
  </div>

</article>
<a href="#" onclick="scrollToTop();return false">&uarr;</a>
